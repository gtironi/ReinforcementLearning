import requests

class Programador:
    def __init__(self, model, problem_description):
        self.base_prompt = "You are a Python developer and data-scientist. Your job is to write code to solve data-science problems. Be concise and make sure to document your code."
        self.problema_descrito = problem_description
        self.codigo = ""
        self.documentacao = ""
        self.sugestoes = []
        self.model = model

    def criar_novo_codigo(self):
        """
        Gera código inicial com base na descrição do problema.
        """
        prompt = f"Escreva um código Python para resolver o seguinte problema: {self.problema_descrito}"
        codigo = self._chamada_ollama(prompt)
        self.codigo = codigo
        return codigo

    def revisar_codigo(self):
        """
        Revisar o próprio código internamente.
        """
        prompt = f"Revise o seguinte código para melhorar e corrigir possíveis erros:\n\n{self.codigo}"
        revisao = self._chamada_ollama(prompt)
        self.codigo = revisao
        return revisao

    def implementar_melhorias(self, sugestoes_revisor):
        """
        Implementa melhorias no código com base nas sugestões fornecidas.
        """
        self.sugestoes.extend(sugestoes_revisor)
        prompt = f"Implemente as seguintes melhorias no código:\nSugestões: {', '.join(sugestoes_revisor)}\n\nCódigo:\n{self.codigo}"
        melhoria = self._chamada_ollama(prompt)
        self.codigo = melhoria
        return melhoria

    def documentar_codigo(self):
        """
        Gera e aprimora a documentação do código.
        """
        prompt = f"Documente o seguinte código, explicando a lógica e o funcionamento das partes principais:\n\n{self.codigo}"
        documentacao = self._chamada_ollama(prompt)
        self.documentacao = documentacao
        return documentacao

    def _chamada_ollama(self, prompt):
        """
        Faz uma chamada à API do Ollama com o prompt especificado.
        """
        url = f"http://localhost:11434/api/generate"
        payload = {
            "model": self.model,
            "prompt": f"{self.base_prompt}\n\n{prompt}"
        }
        response = requests.post(url, json=payload)

        if response.status_code == 200:
            return response.json().get("content", "").strip()
        else:
            raise Exception(f"Erro na chamada à API Ollama: {response.status_code} - {response.text}")


class Revisor:
    def __init__(self, model, problem_description=""):
        self.model = model
        self.base_prompt = ("You are a Senior Python developer and data-scientist. Your role is to review code generated by other developers and propose improvements.")
        self.problem_description = problem_description
        self.feedback_history = []

    def propor_melhorias(self, code):
        """
        Propor refatorações e otimizações.
        """
        prompt = (f"Considerando o problema descrito: {self.problem_description}\n\n"
                  f"Analise o seguinte código e proponha melhorias de velocidade, "
                  f"uso de memória, e boas práticas de codificação:\n{code}")
        feedback = self._chamada_ollama(prompt)
        self.feedback_history.append({"action": "propor_melhorias", "feedback": feedback})
        return feedback

    def aprovar_ou_rejeitar_codigo(self, codigo):
        """
        Aprova ou rejeita o código com base na adequação ao problema e registra o feedback.
        """
        prompt = f"Avalie se o seguinte código resolve adequadamente o problema descrito:\n\n{codigo}\n\nSe for satisfatório, responda 'Aprovado'. Caso contrário, explique os motivos da rejeição."
        decisao = self._chamada_ollama(prompt)
        return decisao

    def _chamada_ollama(self, prompt):
        """
        Faz uma chamada à API do Ollama com o prompt especificado.
        """
        url = f"http://localhost:11434/api/generate"
        payload = {
            "model": self.model,
            "prompt": f"{self.base_prompt}\n\n{prompt}"
        }
        response = requests.post(url, json=payload)

        if response.status_code == 200:
            return response.json().get("content", "").strip()
        else:
            raise Exception(f"Erro na chamada à API Ollama: {response.status_code} - {response.text}")
