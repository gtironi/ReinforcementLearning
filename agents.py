import ollama
from prompts import *

class Programador:
    def __init__(self, model, problem_description):
        # self.base_prompt = "You are a Python developer and data-scientist. Your job is to write code to solve data-science problems. Be concise and make sure to document your code."
        self.problem_description = problem_description
        self.codigo = ""
        # self.documentacao = ""
        self.sugestoes = []
        self.model = model
        self.conversation_history = []

    def criar_novo_codigo(self):
        """
        Gera código inicial com base na descrição do problema.
        """
        prompt = f"You are a Python developer and data-scientist. Your job is to write code
        to solve data-science problems. Be concise and make sure to document your code. 
        Write a python code to solve the following problem: {self.problem_description}. 
        Remember to store the F1 Score calculation of the model in variables named f1_score."
        
        codigo = extrair_codigo(self._chamada_ollama(prompt))
        self.codigo = codigo
        return codigo

    # def revisar_codigo(self):
    #     """
    #     Revisar o próprio código internamente.
    #     """
    #     prompt = f"Revise o seguinte código para melhorar e corrigir possíveis erros:\n\n{self.codigo}"
    #     revisao = self._chamada_ollama(prompt)
    #     self.codigo = revisao
    #     return revisao

    def implementar_melhorias(self, sugestoes_revisor):
        """
        Implementa melhorias no código com base nas sugestões fornecidas.
        """
        self.sugestoes.extend(sugestoes_revisor)
        prompt = f"Implement the following improvements in the code. Respond
        with Python code only and nothing else.\nSuggestions:
        {', '.join(sugestoes_revisor)}\n\nCode:\n{self.codigo}."
        
        melhoria = extrair_codigo(self._chamada_ollama(prompt))
        self.codigo = melhoria
        return melhoria

    def documentar_codigo(self):
        """
        Gera e aprimora a documentação do código.
        """
        prompt = f"Document the following code, explaining the logic and the
        functionalityof the main parts. Respond with Python code only and 
        nothing else.\nCode:\n\n{self.codigo}."

        documentacao = extrair_codigo(self._chamada_ollama(prompt))
        self.documentacao = documentacao
        return documentacao
    
    def testar_parametros_diferentes(self):
        """
        Gera e aprimora a documentação do código.
        """
        prompt = f"Test different parameters for the model in question. Remember to store
        the F1 Score calculation of the model in a variable named f1_score. Respond with 
        Python code only and nothing else.\n\n{self.codigo}."

        documentacao = extrair_codigo(self._chamada_ollama(prompt))
        self.documentacao = documentacao
        return documentacao

    def _chamada_ollama(self, prompt):
        """
        Faz uma chamada à API do Ollama com o prompt especificado.
        """
        self.conversation_history.append({'role': 'user', 'content': prompt})
        response = ollama.chat(model=self.model, messages=self.conversation_history)
        self.conversation_history.append(response['message'])
        
        return response['message']['content']
       

class Revisor:
    def __init__(self, model, problem_description=""):
        self.model = model
        self.base_prompt = ("You are a Senior Python developer and data-scientist. Your role is to review code generated by other developers and propose improvements.")
        self.problem_description = problem_description
        self.feedback_history = []

    def propor_melhorias(self, code):
        """
        Propor refatorações e otimizações.
        """
        prompt = (f"Considerando o problema descrito: {self.problem_description}\n\n"
                  f"Analise o seguinte código e proponha melhorias de velocidade, "
                  f"uso de memória, e boas práticas de codificação:\n{code}. Seja
                  direto, responda somente com as sujestões sem implementá-las.")
        feedback = self._chamada_ollama(prompt)
        self.feedback_history.append({"action": "propor_melhorias", "feedback": feedback})
        return feedback

    def aprovar_ou_rejeitar_codigo(self, codigo):
        """
        Aprova ou rejeita o código com base na adequação ao problema e registra o feedback.
        """
        prompt = f"Avalie se o seguinte código resolve adequadamente o problema descrito:\n\n{codigo}\n\nSe for satisfatório, responda 'Aprovado'. Caso contrário, explique os motivos da rejeição."
        decisao = self._chamada_ollama(prompt)
        return decisao

    def _chamada_ollama(self, prompt):
        """
        Faz uma chamada à API do Ollama com o prompt especificado.
        """
        response = ollama.chat(model=self.model, messages=[
        {
            'role': 'user', 
            'content': prompt,
        }])

        return response['message']['content']


def extrair_codigo(texto):
    """
    Extrai o código Python de uma string que está delimitada por ```python e ```.

    Args:
        texto (str): A string contendo o código Python.

    Returns:
        str: O código Python extraído ou uma mensagem indicando que não foi encontrado.
    """
    inicio = texto.find("```python")
    if inicio == -1:
        print("Delimitador inicial ```python não encontrado.")
        return texto

    fim = texto.find("```", inicio + 7)  # Busca o próximo ``` após o início
    if fim == -1:
        print("Delimitador final ``` não encontrado.")
        return texto

    # Extrai o conteúdo entre os delimitadores
    codigo = texto[inicio + 7:fim].strip()
    return codigo

if __name__ == "__main__":
    # revisor = Revisor("llama3.2")
    # resposta = revisor._chamada_ollama("Você deve utilizar o dataset sklearn.datasets.load_digits(*) e implementar um modelo de Machine Learning de classifição. Você deve armazenar nas rariáveis com nomes precision, recall a precision e o recall do modelo que você criar. Responda somente com o código entre 3 aspas duplas, como no exemplo: \"\"\"código\"\"\".")
    # print("Resposta do Llama:\n", extrair_codigo(resposta))
    programador = Programador("llama3.2", PROBLEM_DESCRIPTION)
    programador.criar_novo_codigo()
    # Ambiente para execução do código
    ambiente = {}


    # Executa o código no ambiente especificado
    exec(programador.codigo, ambiente)

    # Captura o valor de `resultado` do ambiente
    print(f"A (precision, recall) é: ({ambiente["precision"]}, {ambiente["recall"]})")
    
    
    